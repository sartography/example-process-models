<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" id="Definitions_96f6665" targetNamespace="http://bpmn.io/schema/bpmn" exporter="Camunda Modeler" exporterVersion="3.0.0-dev">
  <bpmn:process id="Return_Holidays" name="Return Holidays" isExecutable="true">
    <bpmn:ioSpecification>
      <bpmn:dataInput id="start_date" name="Start Date" />
      <bpmn:dataInput id="end_date" name="End Date" />
      <bpmn:dataOutput id="holidays" name="Holidays" />
      <bpmn:inputSet>
        <bpmn:dataInputRefs>start_date</bpmn:dataInputRefs>
        <bpmn:dataInputRefs>end_date</bpmn:dataInputRefs>
      </bpmn:inputSet>
      <bpmn:outputSet>
        <bpmn:dataOutputRefs>holidays</bpmn:dataOutputRefs>
      </bpmn:outputSet>
    </bpmn:ioSpecification>
    <bpmn:startEvent id="StartEvent_1">
      <bpmn:outgoing>Flow_17db3yp</bpmn:outgoing>
    </bpmn:startEvent>
    <bpmn:sequenceFlow id="Flow_17db3yp" sourceRef="StartEvent_1" targetRef="Get_Holidays" />
    <bpmn:endEvent id="EndEvent_1">
      <bpmn:incoming>Flow_0xrj66g</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:sequenceFlow id="Flow_0xrj66g" sourceRef="Get_Holidays" targetRef="EndEvent_1" />
    <bpmn:scriptTask id="Get_Holidays" name="Get Holidays">
      <bpmn:incoming>Flow_17db3yp</bpmn:incoming>
      <bpmn:outgoing>Flow_0xrj66g</bpmn:outgoing>
      <bpmn:script>def get_nth_weekday_in_month(year, month, weekday, n):
    """Get nth weekday in a given month (n=1 for 1st, n=-1 for last)"""
    if n &gt; 0:
        # Find first occurrence of weekday
        date = datetime(year, month, 1)
        while date.weekday() != weekday:
            date += timedelta(days=1)
        # Add weeks to get to nth occurrence
        date += timedelta(weeks=n-1)
    else:
        # Start from end of month and work backwards
        if month == 12:
            date = datetime(year + 1, 1, 1) - timedelta(days=1)
        else:
            date = datetime(year, month + 1, 1) - timedelta(days=1)
        while date.weekday() != weekday:
            date -= timedelta(days=1)
    return date.date()

"""Generate a list of US Federal holidays, if any, occuring between passed in start_date and end_date"""
holidays = []

# Convert string dates to datetime if needed
if isinstance(start_date, str):
    start = datetime.strptime(start_date, '%Y-%m-%d').date()
if isinstance(end_date, str):
    end = datetime.strptime(end_date, '%Y-%m-%d').date()

# Generate holidays for each year in range
for year in range(start.year, end.year + 1):
    # Fixed date holidays
    fixed_holidays = [
        (datetime(year, 1, 1).date(), "New Year's Day"),
        (datetime(year, 6, 19).date(), "Juneteenth National Independence Day"),
        (datetime(year, 7, 4).date(), "Independence Day"),
        (datetime(year, 11, 11).date(), "Veterans Day"),
        (datetime(year, 12, 25).date(), "Christmas Day")
    ]
    
    # Floating holidays
    floating_holidays = [
        (get_nth_weekday_in_month(year, 1, 0, 3), "Martin Luther King Jr. Day"),  # 3rd Monday in Jan
        (get_nth_weekday_in_month(year, 2, 0, 3), "Washington's Birthday"),       # 3rd Monday in Feb
        (get_nth_weekday_in_month(year, 5, 0, -1), "Memorial Day"),              # Last Monday in May
        (get_nth_weekday_in_month(year, 9, 0, 1), "Labor Day"),                  # 1st Monday in Sep
        (get_nth_weekday_in_month(year, 10, 0, 2), "Columbus Day"),              # 2nd Monday in Oct
        (get_nth_weekday_in_month(year, 11, 3, 4), "Thanksgiving Day")           # 4th Thursday in Nov
    ]
    
    # Combine and filter holidays within date range
    all_holidays = fixed_holidays + floating_holidays
    for date, name in all_holidays:
        if start &lt;= date &lt;= end:
            holidays.append((date.strftime("%Y-%m-%d"), name))

# Sort holidays by date
holidays = sorted(holidays)

del(start)
del(date)
del(end)
del(all_holidays)
del(fixed_holidays)
del(floating_holidays)</bpmn:script>
    </bpmn:scriptTask>
  </bpmn:process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Return_Holidays">
      <bpmndi:BPMNShape id="_BPMNShape_StartEvent_2" bpmnElement="StartEvent_1">
        <dc:Bounds x="179" y="159" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_14za570_di" bpmnElement="EndEvent_1">
        <dc:Bounds x="432" y="159" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1km0u9u_di" bpmnElement="Get_Holidays">
        <dc:Bounds x="270" y="137" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="DataInput-26970999-1DI" bpmnElement="start_date">
        <dc:Bounds x="42" y="55" width="36" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="36" y="112" width="50" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="DataInput-850343989-1DI" bpmnElement="end_date">
        <dc:Bounds x="142" y="55" width="36" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="137" y="112" width="46" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="DataOutput-296027371-1DI" bpmnElement="holidays">
        <dc:Bounds x="502" y="55" width="36" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="500" y="112" width="43" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_17db3yp_di" bpmnElement="Flow_17db3yp">
        <di:waypoint x="215" y="177" />
        <di:waypoint x="270" y="177" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0xrj66g_di" bpmnElement="Flow_0xrj66g">
        <di:waypoint x="370" y="177" />
        <di:waypoint x="432" y="177" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>
